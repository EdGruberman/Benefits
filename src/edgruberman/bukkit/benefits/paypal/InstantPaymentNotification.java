package edgruberman.bukkit.benefits.paypal;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class InstantPaymentNotification {

    private final String original;
    private final Map<String, String> variables = new HashMap<String, String>();

    /**
     * @param notification unprocessed HTTP POST request body content
     * @throws InvalidNotificationException if PayPal does not verify
     * @throws IOException if problem verifying with PayPal
     * @throws UnsupportedEncodingException if variables can not be decoded
     */
    public InstantPaymentNotification(final String notification) throws UnsupportedEncodingException {
        this.original = notification;

        // parse variables
        final String entries[] = notification.split("&");
        for (final String entry : entries) {
            final String variable[] = entry.split("=");
            final String key = ( variable.length >= 1 ? URLDecoder.decode(variable[0], "UTF-8") : null );
            final String value = ( variable.length >= 2 ? URLDecoder.decode(variable[1], "UTF-8") : null );
            this.variables.put(key, value);
        }
    }

    @Override
    public String toString() {
        return this.original;
    }

    /** @return raw value associated with key, null if not present */
    public String getValue(final Variable variable) {
        return this.getValue(variable.getKey());
    }

    /** @return raw value associated with key, null if not present */
    public String getValue(final String key) {
        return this.variables.get(key);
    }

    public TransactionType parseTransactionType() {
        final String value = this.getValue(Variable.TRANSACTION_TYPE);
        return TransactionType.of(value);
    }

    public PaymentStatus parsePaymentStatus() {
        final String value = this.getValue(Variable.PAYMENT_STATUS);
        return PaymentStatus.of(value);
    }

    /**
     * Warning: assumes decimal currency
     * @return full amount of payment in smallest denomination
     * (cents for USD), null if not present
     */
    public Long parseGross() throws NumberFormatException {
        final String value = this.getValue(Variable.GROSS);
        return ( value != null ? Long.parseLong(value.replace(".", "")) : null );
    }

    public Date parsePaymentDate() throws ParseException {
        final String value = this.getValue(Variable.PAYMENT_DATE);
        return ( value != null ? new SimpleDateFormat("HH:mm:ss MMM dd, yyyy z", Locale.ENGLISH).parse(value) : null );
    }



    public enum Variable {

        /**
         * @see TransactionType
         */
        TRANSACTION_TYPE("txn_type")

        /**
         * The merchant's original transaction identification number for the
         * payment from the buyer, against which the case was registered.
         */
        , TRANSACTION_ID("txn_id")

        /**
         * The status of the payment
         * @see PaymentStatus
         */
        , PAYMENT_STATUS("payment_status")

        /**
         * Time/Date stamp generated by PayPal, in the following format:
         * <code>HH:MM:SS Mmm DD, YYYY PDT</code>
         * <p>Length: 28 characters
         */
        , PAYMENT_DATE("payment_date")

        /**
         * Full amount of the customer's payment, before transaction fee is
         * subtracted. Equivalent to payment_gross for USD payments. If this
         * amount is negative, it signifies a refund or reversal, and either
         * of those payment statuses can be for the full or partial amount of
         * the original transaction
         */
        , GROSS("mc_gross")

        /**
         * For payment IPN notifications, this is the currency of the payment.
         */
        , CURRENCY("mc_currency")

        /**
         * Primary email address of the payment recipient (that is, the
         * merchant). If the payment is sent to a non-primary email address
         * on your PayPal account, the receiver_email is still your primary
         * email.
         * <p>Note: The value of this variable is normalized to lowercase
         * characters.<br>
         * Length: 127 characters
         */
        , RECEIVER_EMAIL("receiver_email")

        /**
         * Customer's primary email address. Use this email to provide any
         * credits.
         * <p>Length: 127 characters
         */
        , PAYER_EMAIL("payer_email")

        /**
         * Custom value as passed by you, the merchant. These are
         * pass-through variables that are never presented to your customer
         * <p>Length: 255 characters
         */
        , CUSTOM("custom")

        ;

        private String key;

        private Variable(final String key) {
            this.key = key;
        }

        public String getKey() {
            return this.key;
        }

        @Override
        public String toString() {
            return this.key;
        }

    }

}
